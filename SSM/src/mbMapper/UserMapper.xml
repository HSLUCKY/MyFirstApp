<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper
  PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
  "http://mybatis.org/dtd/mybatis-3-mapper.dtd">

<mapper namespace="mbMapper.UserMapper">


<sql id="MyUserColumn">
usercode,username,userpassword,birthday
</sql>
<sql id="MyUser#">
#{usercode},#{username},#{userpassword},#{birthday}
</sql>

<!-- 
	parameterType：指定输入参数的类型
	#{}表示一个占位符
	#{id}：其中id表示 接收输入的参数，参数名就是id，如果输入参数是简单类型，#{}中的参数名可以任意
				可以是value或其他名称
	
	resultType：指定sql输出结果所映射的java类型，select 指定resultType表示单条记录映射
				的java对象
 -->
<select id="findUserById" parameterType="int" resultType="mbPojo.User" >
	select * from user where id=#{id}
</select>

<!-- ${}：表示拼接sql串，将接收到的参数的内容不加任何修饰拼接在sql中-->
<select id="findUserByName" parameterType="java.lang.String" resultMap="DetailUserMap" >
select * from user,role where username like concat('%',#{value},'%') and role.id=user.id
</select>

<resultMap type="mbPojo.User" id="DetailUserMap" extends="RoleDetailMap">
	<id column="id" property="id" javaType="long" ></id>
	<result column="usercode" property="usercode" javaType="java.lang.String" ></result>
	<result column="username" property="username" javaType="java.lang.String" ></result>
	<result column="userpassword" property="userpassword" javaType="java.lang.String" ></result>
	<result column="birthday" property="birthday" javaType="java.util.Date" ></result>
	<result column="roleid" property="roleid" javaType="java.lang.Integer" ></result>
	
</resultMap>

<resultMap type="mbPojo.User" id="RoleDetailMap" >
	<association property="role" javaType="mbPojo.Role">
		<id column="id" property="id" javaType="java.lang.Integer"></id>
		<result column="rolecode" property="rolecode" javaType="java.lang.String" ></result>
		<result column="rolename" property="rolename" javaType="java.lang.String" ></result>
	</association>
</resultMap>

<!-- 
	添加用户
	#{}指定pojo的属性名，接收到pojo对象的属性值，mybatis通过OGNL获取对象的属性值
 -->
<insert id="insertUser" parameterType="mbPojo.User" >
	<!-- 
		将插入数据的主键返回到user对象中，
		SELECT LAST_INSERT_ID()：得到刚insert进去记录的主键值，只适用于自增主键
		keyProperty：将查询到的主键值设置到parameterType指定的对象的那个属性
		order：SELECT LAST_INSERT_ID()执行顺序，相对于insert语句来说它的执行顺序
		
		selectKey：给数据库生成主键用的
		
	 -->
	<selectKey keyProperty="id" order="AFTER" resultType="int">
		SELECT LAST_INSERT_ID()
	</selectKey>
	insert into user(<include refid="MyUserColumn"></include>) value(<include refid="MyUser#"></include>)
</insert>

<!-- 
	删除用户
	根据id删除用户，需要输入id
  -->
<delete id="deleteUser" parameterType="java.lang.Integer">
	delete from user where id=#{id}
</delete>

<!-- 
	需要传入用户的id，传入用户的更新信息
 -->
<update id="updateUser" parameterType="mbPojo.User" >
	update user set usercode=#{usercode},username=#{username},userpassword=#{userpassword},birthday=#{birthday} where id=#{id}
</update>

</mapper>